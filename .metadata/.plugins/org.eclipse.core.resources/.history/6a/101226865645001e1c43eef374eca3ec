package com.itdaLearn.service;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.EntityNotFoundException;
import javax.transaction.Transactional;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.context.TestPropertySource;
import org.springframework.web.multipart.MultipartFile;

import com.itdaLearn.constant.CourseCategory;
import com.itdaLearn.constant.CourseLevel;
import com.itdaLearn.dto.CourseFormDto;
import com.itdaLearn.entity.Course;
import com.itdaLearn.entity.CourseImg;
import com.itdaLearn.repository.CourseImgRepository;
import com.itdaLearn.repository.CourseRepository;

@SpringBootTest
@Transactional
@TestPropertySource(properties = {"spring.config.location = classpath:application-test.yml"})
public class CourseServiceTest {
	
	@Autowired
	CourseRepository courseRepository;
	@Autowired
	CourseService courseService;
	@Autowired
	CourseImgRepository courseImgRepository;
	
	List<MultipartFile> createMultipartFiles() throws Exception{
		
		List<MultipartFile> multipartFileList = new ArrayList<>();
		
		for(int i=0; i<5; i++) {
			String path = "C:/shop/item/";
			String imageName = "image" + i + ".jpg";
			MockMultipartFile multipartFile = 
					new MockMultipartFile(path, imageName, "image/jpg", new byte[] {1,2,3,4});
			multipartFileList.add(multipartFile);
		}
		
		return multipartFileList;
	}
	
	@Test
	@DisplayName("상품 등록 테스트")
	void saveCourse() throws Exception {
		CourseFormDto courseFormDto = new CourseFormDto();
		courseFormDto.setCourseTitle("테스트 자바 강의");
		courseFormDto.setCourseTeacher("김현승");
		courseFormDto.setCourseDec("테스트 강의 입니다.");
		courseFormDto.setCoursePrice(1000);
		courseFormDto.setCourseLevel(CourseLevel.LOW);
		courseFormDto.setCourseCategory(CourseCategory.BE);
		
//saveItem 메서드는 새로운 상품을 생성하고 이 상품의 ID를 반환합니다	
		List<MultipartFile> multipartFileList = createMultipartFiles();
		Long courseNo = courseService.saveCourse(courseFormDto);
		List<CourseImg> courseImgList = courseImgRepository.findByCourseNoOrderByNoAsc(courseNo);
//반환받은 상품  ID를 사용하여 상품 이미지 리스트와 상품 정보를 데이터베이스에서 조회합니다.		
		Course course = courseRepository.findById(courseNo)
				.orElseThrow(EntityNotFoundException::new);
//데이터베이스에서 조회한 상품 정보와 이미지 파일명이 기대하는 값과 일치하는지 확인합니다.		
		assertEquals(courseFormDto.getCourseTitle(), course.getCourseTitle());
		assertEquals(courseFormDto.getCourseTeacher(), course.getCourseTeacher());
		assertEquals(courseFormDto.getCourseDec(), course.getCourseDec());
		assertEquals(courseFormDto.getCoursePrice(), course.getCoursePrice());
		assertEquals(courseFormDto.getCourseLevel(), course.getCourseLevel());
		assertEquals(courseFormDto.getCourseCategory(), course.getCourseCategory());
		assertEquals(multipartFileList.get(0).getOriginalFilename(), courseImgList.get(0).getOriImgName());
	}//테스트 관리자 권한으로 실행되도록 하고 saveItem 메서드가 관리자 권한을 가진 사용자만 호출할 수 있도록
	
	@Test
	@DisplayName("강의 상세보기 테스트")
	public void courseDetailTest() throws Exception {
		//given
		Course newCourse = courseRepository.save(createCourse("테스트 강의", "김상준", "하하하", 5000, CourseLevel.HIGH, CourseCategory.BE));
		Long saveNo = newCourse.getCourseNo();

		//when
		Course savedCourse = courseRepository.findById(saveNo)
				.orElseThrow(EntityNotFoundException::new);
		
		//then
		assertEquals(newCourse, savedCourse);

	}
	
	public Course createCourse(String title, String teacher, String dec, Integer price, CourseLevel level, CourseCategory category) {
		
		Course newCourse = new Course();
		newCourse.setCourseTitle(title);
		newCourse.setCourseTeacher(teacher);
		newCourse.setCourseDec(dec);
		newCourse.setCoursePrice(price);
		newCourse.setCourseCategory(category);
		newCourse.setCourseLevel(level);
		
		return newCourse;
	}
	
	@Test
	@DisplayName("강의 삭제 테스트")
	public void deleteCourseByNoTest() throws Exception {
		//given
		Course newCourse = courseRepository.save(createCourse("테스트 강의", "김상준", "하하하", 5000, CourseLevel.HIGH, CourseCategory.BE));
		Course newCourse2 = courseRepository.save(createCourse("테스트 강의2", "김상준2", "하하하2", 5000, CourseLevel.HIGH, CourseCategory.BE));

		//when
		courseService.deleteCouseByNo(newCourse.getCourseNo());
		
		//then
		assertEquals(courseRepository.findAll().size(), 1);
	}
	
	@Test
	@DisplayName("강의 업데이트 테스트")
	public void updateCourseTest() throws Exception {
		//given
		Course newCourse = courseRepository.save(createCourse("테스트 강의", "김상준", "하하하", 5000, CourseLevel.HIGH, CourseCategory.BE));
		
		//when
		CourseFormDto courseFormDto = new CourseFormDto();
		courseFormDto.setCourseTitle("테스트 자바 강의");
		courseFormDto.setCourseTeacher("김현승");
		courseFormDto.setCourseDec("테스트 강의 입니다.");
		courseFormDto.setCoursePrice(1000);
		courseFormDto.setCourseLevel(CourseLevel.LOW);
		courseFormDto.setCourseCategory(CourseCategory.BE);
		courseFormDto.setCourseNo(1L);
		Long saveCourseNo = courseService.updateCourse(courseFormDto);
		
		//then
		assertEquals(saveCourseNo, newCourse.getCourseNo());

	}
}
