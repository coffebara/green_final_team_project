package com.itdaLearn.service;

import java.util.List;

import javax.persistence.EntityNotFoundException;

import org.hibernate.cache.spi.support.AbstractReadWriteAccess.Item;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import com.itdaLearn.dto.CourseFormDto;
import com.itdaLearn.dto.CourseSearchDto;
import com.itdaLearn.entity.Course;
import com.itdaLearn.repository.CourseImgRepository;
import com.itdaLearn.repository.CourseRepository;

import lombok.RequiredArgsConstructor;

@Service
@Transactional
@RequiredArgsConstructor
public class CourseService {

	private final CourseRepository courseRepository;
	private final CourseImgService courseImgService;
	private final CourseImgRepository courseImgRepository;
	
	
	//코스 생성
	public Long saveCourse(CourseFormDto courseFormDto, List<MultipartFile> courseImgFileList) throws Exception{
		//사용자로부터 상품 정보와 이미지 파일을 입력받아 상품을 저장한 후, 저장된 상품의 id를 반환합니다.		
		//상품등록
				Item item = itemFormDto.createItem();
		//상품 등록 폼으로부터 입력받은 데이터를 이용하여 item 객체를 생성
				itemRepository.save(item);
		//상품 데이터를 저장합니다		
				//이미지 등록
				for(int i=0; i<itemImgFileList.size(); i++) {
					ItemImg itemImg = new ItemImg();
					itemImg.setItem(item);
		//첫 번째 이미지일 경우 대표 상품 이미지 여부 값을 "Y"로 세팅합니다
					if(i == 0)
						itemImg.setRepimgYn("Y");
					else
						itemImg.setRepimgYn("N");
		//첫번째, 상품 이미지에 대한 정보를 두번재,실제로 사용자가 업로드한 이미지 파일
					itemImgService.saveItemImg(itemImg, itemImgFileList.get(i));
				}
				return item.getId();
			}
	
	
	

	// 코스 삭제
	public void deleteCouseByNo(Long courseNo) {

		Course course = courseRepository.findById(courseNo).orElseThrow(EntityNotFoundException::new);

		courseRepository.deleteById(course.getCourseNo());
	}

	public Long saveCourse(CourseFormDto courseFormDto) throws Exception {

		Course course = courseFormDto.createCourse();

		courseRepository.save(course);

		return course.getCourseNo();
	}

	// 강의 상세보기
	@Transactional(readOnly = true)
	public CourseFormDto getCourseDtl(Long course_no) {

		Course course = courseRepository.findById(course_no).orElseThrow(EntityNotFoundException::new);

		CourseFormDto courseFormDto = CourseFormDto.of(course);

		return courseFormDto;
	}

	// 코스 업데이트
	public Long updateCourse(CourseFormDto courseFormDto) throws Exception {

		Course course = courseRepository.findById(courseFormDto.getCourseNo())
				.orElseThrow(EntityNotFoundException::new);
		course.updateItem(courseFormDto);

		return course.getCourseNo();
	}
	
	@Transactional(readOnly = true)
	public Page<Course> getAdminCoursePage(CourseSearchDto courseSearchDto, Pageable pageable){
		return courseRepository.getAdminCoursePage(courseSearchDto, pageable);
	}//관리자가 보는 아이템 페이지를 가져옵니다.
	
}
